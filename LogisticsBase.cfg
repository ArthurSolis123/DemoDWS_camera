<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Cfgs>
  <!--Image source acquisition configuration-->
  <ImageAcqCfg>
    <!--Working mode mod: 0=barcode priority 1=volume only-->
    <WorkMode mode="0" />
    <!--Image source acquisition method, mode value: 1 = Automatically discover all barcode scanning cameras 2 = Discover cameras based on IP/KEY 3 = Discover all smart cameras 4 = Discover all industrial cameras randWorkMode: 0 Work according to the number of cameras 1 Work with any camera waitBindType: Aggregate waiting mode 0 Start based on trigger 1 End based on trigger lineDelay: Line scan camera photoelectric position delay (positive represents behind, negative represents in front)-->
    <ImageAcq mode="1" num="6" randWorkMode="1" interPacketTimeout="50" cameraTimeout="260" waitBindType="0" handleResultDelayTime="1500" firstFrameTimeDiff="100" packageTimeDiff="300" bufferCnt="6" reConnectCnt="10000" lineDelay="0" MaxPayloadSize="5000" enableCollectQuick="0" firstCodeCollectDelay="10"/>
    <!--Barcode reading mode, triggerMode value: 2 = soft trigger mode 1 = hard trigger mode 0 = free stream mode, mode value: 0 = package distinguishing mode 1 = fast scanning mode, cacheSize: N barcodes cannot be repeated, MaxframeProcessCache: The maximum number of images of a single package processed by a single camera, the default is 40, doubleFrameMode: The camera reads the barcode first and then the image in a double-frame mode, enableFrameRate: Frame rate configuration switch, frameRate: Camera frame rate-->
    <ReadCodeMode triggerMode="1" mode="0" cacheSize="3" maxFrameProcessCache="40" lineDebounceAbsTime="30000" constantNoread="0" positionFiltering="0" doubleFrameMode="0" enableFrameRate="0" frameRate="6" minCollectCount="0" />
    <!--Industrial camera configuration items, ip: GigE network port camera, key: U3V camera, enable: 1-use 0-not use, redundant configuration and other illegal configurations are prohibited-->
    <Camera ip="100.100.11.11" enable="0" />
    <Camera key="2F0444FPAK00012" enable="0" />
    <Camera id="Dahua Technology:2F0444FPAK00012" enable="0" />
    <!--Smart camera configuration items, timeSyncMode: 0 = NTP mode 1 = Manual mode, timeSyncNum: Set the camera time interval. The default is 10s. Refer to the properties after SVS discovers the camera. MultiFrameGroup: 0 Default CombineResults mode. Other values ​​use the existing camera configuration. outImgType: 0 Use the existing type 1 jpeg 2 1/4 mode jpegQuality: Image quality factor under JPEG output mode enablePhaseTimeout: Timed outflow switch-->
    <SmartCamera timeSyncMode="1" timeSyncNum="10" scpdEnable="1" scpdDelay="8000" inputIODebounceEnable="1" inputIODebounceFilter="10000" MultiFrameGroup="0" customMode="0" outImgType="0" jpegQuality="70" enablePhaseTimeout="0" PhaseTimeout="1000" />
    <!--Customer Cooperation Model-->
    <CustomerMode mode="0" />
    <!--Camera matching rules, iraypleCamRule: rules for camera key values ​​supported by the current SDK; smartCamRule: rules supported by smart camera models; linearCamRule: rules supported by linear array camera models; volCamRule: rules supported by 3D camera models.-->
    <CameraRegexRule iraypleCamRule="" smartCamRule="(?=(^(DH-MV-ES)).*)(.*)" linearCamRule="(?=(^(DH-MV-ESL)).*)(.*)" volCamRule="" />
    <!--Other settings, for falling edge triggered cameras, if the falling edge camera model is the old S5 camera, TDownModel = 1, otherwise TDownModel = 0-->
    <OtherCfg TDownModel="0" />
    <!--Kuaishou scan configuration, enableMutilCode enables multiple barcode reporting, enableMutilFrame enables multiple frame reporting, mutilFrameTimeOut multiple frame aggregation timeout-->
    <RapidScanCfg enableMutilCode="0" enableMutilFrame="0" waitTimeOut ="200"/>
  </ImageAcqCfg>
  <!--Barcode filtering configuration-->
  <CodeFilterCfg>
	  <!--Barcode Filtering Description: Multiple rules can be configured. The relationship between multiple conditions in a single rule is "AND", and the relationship between multiple rules is "OR".-->
    <!--Barcode Filtering Rules. Rule values ​​can be OR. 0 = None, 1 = Basic garbled code filtering, 2 = All numbers pass, 4 = All letters pass, 8 = Mixed alphanumeric characters pass, 16 = Barcodes within the length range [minCodeSize, maxCodeSize] pass.-->
    <!--Barcode Filtering Rules. Rule values ​​can be OR. 32 = Barcodes starting with [vecPrefixs] pass, 64 = Barcodes ending with [vecSuffix] pass, 128 = Barcodes not starting with [vecNotPrefixs] pass, 256 = Barcodes not ending with vecNotSufix pass.-->
    <!--Barcode Filtering Rules. Rule values ​​can be OR. 512 = Barcodes matching the regular expression pass.-->
    <Rules>
      <Rule val="1">
        <!--16-Rule [Barcode Length Range Shortest] Parameters-->
        <MinCodeSizeParam val="13" />
        <!--16-Rule [Barcode Length Range Longest] Parameters-->
        <MaxCodeSizeParam val="21" />
        <!--32-Rule starts with [vecPrefisx] parameter-->
        <CodeBeginWithParam>
          <val>bw11111</val>
          <val>bwaaaaa</val>
        </CodeBeginWithParam>
        <!--64-Rule [ending with vecSuffix] parameter-->
        <CodeEndWithParam>
          <val>22222ew</val>
        </CodeEndWithParam>
        <!--128-Rule [does not start with vecNotPrefixs] parameter-->
        <CodeNotBeginWithParam>
          <val>nbw33333</val>
        </CodeNotBeginWithParam>
        <!--256-Rule [does not end with vecNotSufix] Parameters-->
        <CodeNotEndWithParam>
          <val>new4444</val>
        </CodeNotEndWithParam>
        <!--512-Regular Expression Filtering-->
        <CodeRegexParam>
          <val>(?=.*)(.*)</val>
        </CodeRegexParam>
      </Rule>
    </Rules>
    <PlatformRules>
      <Rule Enable="1" Name="Rule 1" Type="3" Priority="0" RegexStr="(?=.*)(.*)">
        <CharType Enable="0" Type="0" />
        <CodeLength Enable="0" MinLength="0" MaxLength="0" />
        <StartString Enable="0" Value="" />
        <StartStringNot Enable="0" Value="" />
        <EndString Enable="0" Value="" />
        <EndStringNot Enable="0" Value="" />
        <Content Enable="0" Value="" />
        <ContentNot Enable="0" Value="" />
        <Regex Enable="0" Value="(?=.*)(.*)" />
      </Rule>
    </PlatformRules>
    <!--Repeat filter configuration, cacheSize: number of repeated barcodes enableTimerSwitch Timer filter switch 0: Disable, repeat filter according to cacheSize number 1: Enable, repeat filter according to time cacheTime cacheTime: Timer filter time in ms enableRepeatCollect: Multiple repeated scan reporting switch repeatTime: Repeat scan time repeatCount: Repeat scan times -->
    <RepeatRules cacheSize="3" enableTimerSwitch="0" cacheTime="1000"  enableRepeatCollect="0" repeatTime="1000" repeatCount="1"/>
  </CodeFilterCfg>
  <!--Partial Configuration-->
  <WeightCfg>
    <!--Serial port access mode, 0 = no serial port, 2 = serial port exclusive serial port mode-->
    <WeightMode val="0" />
    <!--Weighing protocol, 7 = serial port (general purpose), please contact R&D for other mode configurations-->
    <WeightProtocol val="7" />
    <!--Serial port configuration-->
    <CommCfg portNum="COM6" baudRate="9600" dataBit="8" dataParity="None" stopBit="1" />
    <!--Tcp configuration-->
    <TcpCfg ip="100.100.11.11" port="0" />
    <!--Whether to enable asynchronous waiting for results, 1 = enabled, 0 = not enabled-->
    <AsynchWait val="1" />
    <!-- In Kuaishou mode, val specifies whether to enable the weight-first-then-barcode function, and sumBarcode specifies whether to sum all barcodes near the weight.-->
    <QuickHand val="0" sumBarcode="0" />
    <!--Number of data used-->
    <SampleNum val="5" />
    <!--Weighing accuracy, in grams-->
    <Precision val="20" />
    <!--The latest timeout for waiting for stabilization, in ms-->
    <Timeout val="600" />
    <!--The earliest timeout for waiting for stability, in ms-->
    <ForeTimeout val="-200" />
    <!--Weight range, min: minimum weight max: maximum weight Unit: g -->
    <WeightRange min="10" max="100000" />
    <!--External parsing library path-->
    <ExtraDll val="" />
    <!--General scale configuration dataLen: complete data length startPos: valid data starting bit index validDataLen: valid data length bReverseOrder: reverse order parsing mode 0 normal order parsing 1 reverse order parsing mode bRealWeightMode: real-time scale mode 0 stable weight mode (default) 1 real-time weight mode bWeightfitting: real-time fitting of stable weight 0 no fitting (default) 1 fitting startBit: packet header (hexadecimal data starting with 0x) stopBit: packet tail (16-bit data starting with 0x) units: weight unit g: 1 kg: 1000 dataType: weight data type 0: ascil type 1: decimal value type-->
    <GeneralCfg dataLen="23" startPos="12" validDataLen="9" bReverseOrder="0" bRealWeightMode="0" bWeightfitting="0" startBit="0x02" stopBit="0x0d 0x0a" dataType="0" units="1000" />
  </WeightCfg>
  <!--Output Configuration-->
  <OutputCfg1>
    <!--CameraIO output configuration enable: 0: Disable 1: Enable-->
    <CameraIOCfg enable="0" />
    <!--IoCfg specific configuration ip: specific camera IP line: IO output line time: drive duration position: which IO mode 0 default is used for manual trigger 1 IO output after obtaining barcode 2 IO output after obtaining weight 4 IO output after obtaining volume Can be turned on at the same time-->
    <IOCfg ip="100.100.11.11" line="3" time="1000" position="0" />
    <!--DbRecordCfg database record module configuration enable: 0: Disable 1: Enable -->
    <DbRecordCfg enable="0" />
  </OutputCfg1>
  <!--Other configuration information-->
  <OtherCfg>
    <!--DUMP control switch -->
    <DumpControl enable="1" />
    <!--Soft encryption control switch -->
    <SoftDogControl enable="0" />
    <!--Real-time exception log reporting configuration control switch -->
    <RealErrorInfo enable="0" />
    <!--Save image enable: Whether to enable the save function enableBmp: 1-Save the image format as BMP 0-Save the image format as Jpg enableNormal: Whether to save coded images enableNoread: Save noread images enableMulti: Whether to save multi-barcode images enableSmartNoread: Whether to save smart phone uncoded images Parameters with Path indicate the corresponding saved image path enableDeleteData: Whether to enable the delete data function deleteDays: Delete time -->
    <SaveImage enable="0" enableBmp="1" enableNormal="0" saveNormalPath="./SaveNormalImages/" enableNoread="0" saveNoreadPath="./SaveNoreadImages/" enableMulti="0" saveMultiPath="./SaveMultiImages/" enableSmartNoread="0" saveSmartNoreadPath="./SaveSmartNoreadImages/"  enableDeleteData="1" deleteDays="2" />
    <!--Panorama barcode cutout and panorama stitching, panoramic camera free streaming, enable, path, IP, delayTime delay shooting time, parameters valid after cutout: wZoom width direction zoom ratio, hZoom height direction zoom ratio, exUp up direction expansion ratio, exDown down direction expansion ratio, exLeft left direction expansion ratio, exRight right direction expansion ratio, enableJpeg: whether to compress the panoramic image to JPEG, quality: compression quality factor, enableRotation: enable the panoramic rotation function, rotationAngle: rotation angle (counterclockwise)-->
    <CombIPCAndBarcodes enable="0" enableSofttrigger="0" enableSampleImg="0" enableSaveImage="0" path="./MergedImages/" ip="" userId="para" delayTime="2000" wZoom="1" hZoom="1" exUp="0.6" exDown="0.7" exLeft="0.1" exRight="0.1" enableJpeg="0" quality="80" enableGrayInstrument="0" roiLeftUpX="150" roiLeftUpY="250" roiRightDownX="2430" roiRightDownY="1700" enableRotation="0" rotationAngle="0" />
    <!--Specify top scan camera -->
    <TopCamera enable="0" ip="100.100.11.11" path="./TopCameraImages/" />
    <!--Flatness -->
    <PlanenessImage enable="0" path="./PlanenessImages/" />
    <!--Real-time callback camera image information function, enable is used to turn on this function, and the realCamer list is used to add and specify the camera for real-time callback -->
    <RealImage enable="0" />
    <RealCamera ip="100.100.11.11" />
    <!--Scheduled callback of package summary results, enable: turn on this function, delaySendTime: the time from when the package passes the photoelectric to when it is sent, type: scheduled sending start time type 0 Tup 1 Tdown-->
    <TimingOutput enable="0" delaySendTime="2500" type="0" />
    <!--All camera scan code information callback control switches enable: Whether to enable the reporting function enableJpeg: Whether to compress the image to JPEG format quality: Image compression quality factor enableNoread: 0: Callback is executed when any information is scanned on the package 1: Callback is executed only when the package is noread allCameraStoragePolicy: Reporting rules 1: Report if there is a barcode 2: Report if noread 4: Report multiple barcodes The three can be superimposed-->
    <AllCameraCodeInfo enable="0" enableJpeg="0" quality="80" enableNoread="0" allCameraStoragePolicy="6"/>
    <!--Main callback interface configuration item enableJpeg: Enable the function of compressing images into jpeg quality: Compression quality factor -->
    <RealCallback enableJpeg="0" quality="80" />
	<!--Delete spaces in the barcode enable: Enable the delete function-->
	<EraseSpace enable="1" />
	<!--Error filtering operator enable is used to enable this function-->
	<BarCodeSummaryFilter enable="1" />
	<!--External filtering rules enable: Enable the deletion function -->
    <ExtraFilterCfg enable="0" />
  </OtherCfg>
  <!--Advanced configuration information-->
  <ExpertCfg>
    <!--Whether to use the length/width value of the camera as the length and width parameters to initialize the 1D and 2D code algorithms -->
    <AlgorithmSizeMode enable="1" />
    <!--One-dimensional code algorithm configuration Type: (A=EAN13_CODE, B=Code128, C=CODE39_CODE, D=EAN8_CODE, E=UPCA_CODE, F=UPCE_CODE, G=CODE93_CODE, H=ITF25_CODE, I=CODABAR_CODE) enableScanline Enable the function of obtaining line scan content saveScanlinePath Line scan image storage address-->
    <BarCode enable="1" imgWidth="6500" imgHeight="4000" codeType="CB" elemMinWidth="3" elemMaxWidth="32" checkSumITF25="0" checkSumCode39="0" sizeMinWidth="50" sizeMaxWidth="5000" sizeMinHeight="10" sizeMaxHeight="5000" barcodeBalanceLevel="5" codeNum="10" max1DCodeNum="10" maxBarcodeWidth="1000" enableScanline="0" saveScanlinePath="./SaveScanlineImage/" />
    <!--3D volume measurement algorithm configuration The difference between the time when the package touches the laser line and the time stamp of the photoelectric trigger minValidTime: minimum difference maxValidTime: maximum difference timeOut: the time when the package passes the laser line and waits for the volume enableTDownBind: bind to the time when the package leaves the volume, 0 by default Compare the laser line time with the code scanning trigger time-->
    <Volume enable="0" cameraNum="1" cfgDir="./3DCfg/" minValidTime="-200" maxValidTime="600" timeOut="200" speedVx="0.0" speedVy="0.0"  enableTriggerCompensate="0" enableTDownBind="0"/>
    <!--Static 3D volume measurement algorithm configuration enableVolFirst Enable stable volume mode (no binding without stable volume)-->
    <StaticVolume enable="0" enableVolFirst="0" />
    <!--Clarity and cutout algorithm configuration-->
    <ClarityMatting enableClarity="0" enableMatting="0" maxReConnect="3" threshold="20" compressQuality="80" imageWidth="6500" imageHeight="4000" enableMvpSmartMatting="0" imgChannel="3" offsetHorizonPercent="20" offsetVerticalPercent="20" withNoCodeMode="0" SmartModePath="./SmartMattingPlugin/MvpSmartMattingMode.smartdlxmodel" />
    <!--DMCode algorithm configuration Image width imageWidth Image height imageHeight QR code type codeType DM 1 QR 2 QR&DM 3 Polarity flag signPolarity Mirror flag signMirror QR contrast threshold thContrast The number of codes to stop decoding after obtaining pixel size codeMinWidth pixel size codeMaxWidth Minimum unit size elemMinWidth Maximum unit size elemMaxWidth Number of QR locators positionPatternMin Decoding capability decoderCapacity 0: Standard 1: Enhanced 2: Strongest Add timeout timeOut Number of QR code stitching cache lines scanLines-->
    <DMCode enable="0" imageWidth="6500" imageHeight="4000" codeType="2" signPolarity="2" signMirror="0" thContrast="20" decodeNum="1" versionMin="1" versionMax="24" codeMinWidth="10" codeMaxWidth="1200" elemMinWidth="3" elemMaxWidth="50" positionPatternMin="3" decoderCapacity="0" timeOut="200" scanLines="1000" />
	<!--PackPoseShow algorithm configuration Enable: 0-off 1-on Maximum image height: the maximum size of all cameras plus 100 Maximum image width: the same height Number of output image channels outputChannel: 1-black and white 3-color Pose image to full image ratio scale: default 0.3 Line width lineWidth: temporarily deprecated (software adapts according to real-time image size) X-axis flip flipX: 0-normal image 1-X-axis flip Y-axis flip flipY: 0-normal image 1-Y-axis flip-->
    <PackPoseShow enable="0" height="7000" width="7000" outputChannel="3" scale="0.3" lineWidth="4" flipX="0" flipY="0"/>
	<!--Package type identification algorithm configuration Enable switch enable Minimum valid time difference minValidTime Maximum valid time difference maxValidTime Binding wait timeout bindTimeout Camera trigger mode triggerType (0 rising edge trigger 1 falling edge trigger)-->
	<!--algMode 0-AI 1-Flat -->
	<!--enableGearShift: Speed ​​Shift Enable 0 Off 1 On velocity: Belt speed (m/s) distance: Distance between binocular and code reader (mm) Binocular-code reader bindBias: Binding error (must be less than 1/2 packet spacing) (ms) When speed shift is enabled, the calculated binding range is used and the set minimum and maximum binding time differences are discarded-->
	<AbnormalPackageDetect enable="0" algMode="0" minValidTime="-200" maxValidTime="600" bindTimeout="200" triggerType="0" enableGearShift="0" velocity="0" distance="0" bindBias="0"/>
  </ExpertCfg>
</Cfgs>
